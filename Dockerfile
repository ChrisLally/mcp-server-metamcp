# Generated by https://smithery.ai. See: https://smithery.ai/docs/config#dockerfile
# Use an official Node.js runtime as a parent image
FROM node:20-alpine AS builder

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to the container
COPY package.json package-lock.json ./

# Install the dependencies
RUN --mount=type=cache,target=/root/.npm npm install --ignore-scripts

# Copy the current directory contents into the container at /app
COPY . .

# Build the app
RUN npm run build

# Use a smaller Node.js runtime image for the final stage
FROM node:20-alpine

# Set the working directory in the container
WORKDIR /app

# Copy only the built files from the builder stage
COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/package.json /app/package.json
COPY --from=builder /app/package-lock.json /app/package-lock.json

# Set environment variables
ENV NODE_ENV=production

# Install only production dependencies
RUN npm ci --omit=dev

# Make port 3000 available to the world outside this container
EXPOSE 3000

# Install curl, Python 3.12 and other necessary tools
RUN apk add --no-cache curl bash python3 py3-pip

# Install uv and make uvx available
RUN curl -LsSf https://astral.sh/uv/install.sh -o install.sh && \
    sh install.sh && \
    rm install.sh

# Ensure uv binaries are in PATH
ENV PATH="/root/.cargo/bin:${PATH}"

# Ensure npx is available (it should be included with Node.js installation)
# But we'll verify it's working
RUN npx --version || npm install -g npx

# Run the application
# Command line arguments can be passed to the container:
# --metamcp-api-key <your-api-key> --metamcp-api-base-url <base-url>
ENTRYPOINT ["node", "dist/index.js"]
